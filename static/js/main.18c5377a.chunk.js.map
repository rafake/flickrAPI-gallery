{"version":3,"sources":["components/picture.js","components/modalPicture.js","components/gallery.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Picture","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","openImage","info","farm","server","id","secret","react_default","a","createElement","className","onClick","src","concat","alt","React","Component","ModalPicture","path","author","onClickClose","Gallery","imgInfo","console","log","urlInfo","fetch","then","r","json","resp","setState","isOpen","photo","owner","username","description","_content","state","photos","_this2","url","type","_this3","images","map","el","i","picture","key","lib_default","elementType","modalPicture","App","thingSearch","Fragment","gallery","Boolean","window","location","hostname","match","document","addEventListener","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.18c5377a.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nclass Picture extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleClick = () => {\r\n        if(typeof this.props.openImage == \"function\") {\r\n            const info = {\r\n                farm: this.props.farm,\r\n                server: this.props.server,\r\n                id: this.props.id,\r\n                secret: this.props.secret\r\n            };\r\n            this.props.openImage(info)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <li className=\"picture-item\"\r\n                onClick={this.handleClick}>\r\n                <img src={`https://farm${this.props.farm}.staticflickr.com/${this.props.server}/${this.props.id}_${this.props.secret}_m.jpg`} alt=\"\"/>\r\n            </li>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Picture;","import React from \"react\";\r\n\r\n\r\nclass ModalPicture extends React.Component {\r\n    render() {\r\n        return <div className=\"overlay-modal\">\r\n            <div className=\"overlay-modal-bg\">\r\n                <img src={this.props.path} alt=\"\"/>\r\n                <h2>Author: {this.props.author}</h2>\r\n                {/*<h2>Description: {this.props.description}</h2>*/}\r\n            </div>\r\n            <button className=\"closeButton reset-Button\" onClick={this.props.onClickClose}>Close</button>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ModalPicture;","import React from \"react\";\r\nimport Picture from \"./picture\";\r\nimport Masonry from 'react-masonry-component';\r\nimport ModalPicture from './modalPicture'\r\n\r\nclass Gallery extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            photos: [],\r\n            author: \"\",\r\n            description: \"\",\r\n            isOpen: false,\r\n            // value: \"\"\r\n        }\r\n    }\r\n\r\n    // handleChange = (event) => {\r\n    //     this.setState({value: event.target.value})\r\n    // };\r\n\r\n    openImage = (imgInfo) => {\r\n        console.log(imgInfo);\r\n        const urlInfo = `https://api.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=67fa847a53bdc09b2db5c74c43d44b39&photo_id=${imgInfo.id}&format=json&nojsoncallback=1`\r\n        fetch(urlInfo).then(r=>r.json()).then(resp=> {\r\n            console.log(imgInfo.id);\r\n            console.log(resp);\r\n            this.setState({isOpen: true,\r\n            author: resp.photo.owner.username,\r\n            description: resp.photo.description._content,\r\n            path: `https://farm${imgInfo.farm}.staticflickr.com/${imgInfo.server}/${imgInfo.id}_${imgInfo.secret}_c.jpg`})\r\n\r\n        }\r\n        )\r\n    };\r\n\r\n    onClickClose = () => {\r\n        this.setState({isOpen: false})\r\n    };\r\n\r\n    componentDidMount() {\r\n        const url = `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=67fa847a53bdc09b2db5c74c43d44b39&text=${this.props.type}&per_page=10&format=json&nojsoncallback=1`\r\n        fetch(url).then(r=>r.json()).then(resp=> this.setState({photos: resp.photos.photo}))\r\n    }\r\n\r\n    render() {\r\n        const images = this.state.photos.map( (el,i) => {\r\n            console.log(this.state.photos);\r\n            return <Picture key={i}\r\n                            farm={el.farm}\r\n                            server={el.server}\r\n                            id={el.id}\r\n                            secret={el.secret}\r\n                            openImage={this.openImage}/>\r\n        });\r\n        return (\r\n            <section>\r\n                <Masonry className={'gallery'}\r\n                         elementType={'ul'}\r\n                >\r\n                {images}\r\n                </Masonry>\r\n                {\r\n                    this.state.isOpen && <ModalPicture author={this.state.author} path={this.state.path} description={this.state.description} onClickClose={this.onClickClose}/>\r\n                }\r\n\r\n                {/*<form onSubmit={this.props.onClickButtonChoice}>*/}\r\n                {/*    <label>*/}\r\n                {/*        choose a thing*/}\r\n                {/*    <input type=\"text\" id=\"input\" value={this.state.value} onChange={this.handleChange}/>*/}\r\n                {/*    </label>*/}\r\n                {/*    <input type=\"submit\" value=\"submit\"/>*/}\r\n                {/*</form>*/}\r\n\r\n\r\n            </section>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Gallery;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Gallery from \"./components/gallery\";\n\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      thingSearch: \"hej\"\n    }\n  }\n  // handleOnClickButtonChoice = (event, value) => {\n  //   event.preventDefault();\n  //   console.log(event);\n  //   console.log(value);\n  //   let a = document.querySelector(\"#input\");\n  //   console.log(a);\n  //   this.setState({thingSearch: a.value});\n  //\n  // };\n  render() {\n    return (\n        <>\n        <Gallery type=\"duck\"/*{this.state.thingSearch} onClickButtonChoice={this.handleOnClickButtonChoice}*/ />\n        </>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    ReactDOM.render(<App />, document.getElementById('root'));\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}